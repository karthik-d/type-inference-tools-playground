digraph "Type Graph" {
	node [shape=box]
	"text(arg),0
  [4, 10, 14]
 Possible Types { }"
	"text,1
  [5, 38, 42]
 Possible Types { }"
	"normalized_text,0
  [5, 4, 19]
 Possible Types { }"
	"normalized_text,1
  [6, 27, 42]
 Possible Types { }"
	"ast,0
  [6, 10, 13]
 Possible Types { }"
	"tmp,0
  [6, 4, 7]
 Possible Types { }"
	"tmp,1
  [9, 27, 30]
 Possible Types { }"
	"shape,0
  [7, 4, 9]
 Possible Types { }"
	"shape,1
  [15, 8, 13]
 Possible Types { }"
	"shape,2
  [15, 8, 13]
 Possible Types { }"
	"shape,3
  [16, 11, 16]
 Possible Types { }"
	"placeholders,0
  [8, 4, 16]
 Possible Types { }"
	"placeholders,1
  [12, 12, 24]
 Possible Types { }"
	"placeholders,2
  [12, 12, 24]
 Possible Types { }"
	"placeholders,3
  [16, 18, 30]
 Possible Types { }"
	"i,0
  [9, 8, 9]
 Possible Types { }"
	"t,0
  [9, 12, 13]
 Possible Types { }"
	"t,1
  [10, 22, 23]
 Possible Types { }"
	"t,2
  [10, 22, 23]
 Possible Types { }"
	"t,3
  [11, 35, 36]
 Possible Types { }"
	"t,4
  [12, 25, 26]
 Possible Types { }"
	"t,5
  [10, 22, 23]
 Possible Types { }"
	"t,6
  [13, 25, 26]
 Possible Types { }"
	"t,7
  [13, 25, 26]
 Possible Types { }"
	"t,8
  [14, 17, 18]
 Possible Types { }"
	"t,9
  [13, 25, 26]
 Possible Types { }"
	"pt,0
  [11, 12, 14]
 Possible Types { }"
	"pt,1
  [12, 30, 32]
 Possible Types { }"
	"pt,2
  [14, 12, 14]
 Possible Types { }"
	"pt,3
  [15, 21, 23]
 Possible Types { }"
	"Return_Value@parse
  [16, 4, 30]
 Possible Types { }"
	node [shape=ellipse]
	"call _normalize_text
  [5, 22, 43]"
	"call literal_eval
  [6, 10, 43]"
	"call enumerate
  [9, 17, 31]"
	"call Placeholder
  [11, 17, 37]"
	"call append
  [15, 8, 24]"
	"=
  [5, 4, 43]"
	"=
  [6, 4, 43]"
	"=
  [7, 4, 14]"
	"=
  [8, 4, 21]"
	"=
  [11, 12, 37]"
	"=
  [12, 12, 32]"
	"=
  [14, 12, 18]"
	"List_Read
  [7, 12, 14]"
	"Dict_Read
  [8, 19, 21]"
	"Tuple_Write
  [9, 8, 13]"
	"Subscript_Write
  [12, 12, 27]"
	"forin
  [9, 4, 24]"
	"Tuple_Read
  [16, 11, 30]"
	"merge placeholders0, placeholders2"
	"merge pt2, pt1"
	"merge shape2, shape0"
	"merge (placeholders0, placeholders2), placeholders0"
	"branch t1"
	"branch t6"
	node [shape=circle]
	node [shape=triangle]
	"text(arg),0
  [4, 10, 14]
 Possible Types { }" -> "text,1
  [5, 38, 42]
 Possible Types { }"
	"text,1
  [5, 38, 42]
 Possible Types { }" -> "call _normalize_text
  [5, 22, 43]"
	"call _normalize_text
  [5, 22, 43]" -> "=
  [5, 4, 43]"
	"normalized_text,0
  [5, 4, 19]
 Possible Types { }" -> "normalized_text,1
  [6, 27, 42]
 Possible Types { }"
	"=
  [5, 4, 43]" -> "normalized_text,0
  [5, 4, 19]
 Possible Types { }"
	"ast,0
  [6, 10, 13]
 Possible Types { }" -> "call literal_eval
  [6, 10, 43]"
	"normalized_text,1
  [6, 27, 42]
 Possible Types { }" -> "call literal_eval
  [6, 10, 43]"
	"call literal_eval
  [6, 10, 43]" -> "=
  [6, 4, 43]"
	"tmp,0
  [6, 4, 7]
 Possible Types { }" -> "tmp,1
  [9, 27, 30]
 Possible Types { }"
	"=
  [6, 4, 43]" -> "tmp,0
  [6, 4, 7]
 Possible Types { }"
	"List_Read
  [7, 12, 14]" -> "=
  [7, 4, 14]"
	"shape,0
  [7, 4, 9]
 Possible Types { }" -> "shape,1
  [15, 8, 13]
 Possible Types { }"
	"shape,0
  [7, 4, 9]
 Possible Types { }" -> "merge shape2, shape0"
	"=
  [7, 4, 14]" -> "shape,0
  [7, 4, 9]
 Possible Types { }"
	"Dict_Read
  [8, 19, 21]" -> "=
  [8, 4, 21]"
	"placeholders,0
  [8, 4, 16]
 Possible Types { }" -> "placeholders,1
  [12, 12, 24]
 Possible Types { }"
	"placeholders,0
  [8, 4, 16]
 Possible Types { }" -> "merge placeholders0, placeholders2"
	"placeholders,0
  [8, 4, 16]
 Possible Types { }" -> "merge (placeholders0, placeholders2), placeholders0"
	"=
  [8, 4, 21]" -> "placeholders,0
  [8, 4, 16]
 Possible Types { }"
	"t,0
  [9, 12, 13]
 Possible Types { }" -> "t,1
  [10, 22, 23]
 Possible Types { }"
	"Tuple_Write
  [9, 8, 13]" -> "i,0
  [9, 8, 9]
 Possible Types { }"
	"Tuple_Write
  [9, 8, 13]" -> "t,0
  [9, 12, 13]
 Possible Types { }"
	"tmp,1
  [9, 27, 30]
 Possible Types { }" -> "call enumerate
  [9, 17, 31]"
	"call enumerate
  [9, 17, 31]" -> "forin
  [9, 4, 24]"
	"t,1
  [10, 22, 23]
 Possible Types { }" -> "branch t1"
	"branch t1" -> "t,2
  [10, 22, 23]
 Possible Types { }"
	"branch t1" -> "t,5
  [10, 22, 23]
 Possible Types { }"
	"t,2
  [10, 22, 23]
 Possible Types { }" -> "t,3
  [11, 35, 36]
 Possible Types { }"
	"t,3
  [11, 35, 36]
 Possible Types { }" -> "call Placeholder
  [11, 17, 37]"
	"t,3
  [11, 35, 36]
 Possible Types { }" -> "t,4
  [12, 25, 26]
 Possible Types { }"
	"call Placeholder
  [11, 17, 37]" -> "=
  [11, 12, 37]"
	"pt,0
  [11, 12, 14]
 Possible Types { }" -> "pt,1
  [12, 30, 32]
 Possible Types { }"
	"=
  [11, 12, 37]" -> "pt,0
  [11, 12, 14]
 Possible Types { }"
	"pt,1
  [12, 30, 32]
 Possible Types { }" -> "=
  [12, 12, 32]"
	"pt,1
  [12, 30, 32]
 Possible Types { }" -> "merge pt2, pt1"
	"placeholders,1
  [12, 12, 24]
 Possible Types { }" -> "Subscript_Write
  [12, 12, 27]"
	"t,4
  [12, 25, 26]
 Possible Types { }" -> "Subscript_Write
  [12, 12, 27]"
	"placeholders,2
  [12, 12, 24]
 Possible Types { }" -> "merge placeholders0, placeholders2"
	"Subscript_Write
  [12, 12, 27]" -> "placeholders,2
  [12, 12, 24]
 Possible Types { }"
	"=
  [12, 12, 32]" -> "Subscript_Write
  [12, 12, 27]"
	"t,5
  [10, 22, 23]
 Possible Types { }" -> "t,6
  [13, 25, 26]
 Possible Types { }"
	"t,6
  [13, 25, 26]
 Possible Types { }" -> "branch t6"
	"branch t6" -> "t,7
  [13, 25, 26]
 Possible Types { }"
	"branch t6" -> "t,9
  [13, 25, 26]
 Possible Types { }"
	"t,7
  [13, 25, 26]
 Possible Types { }" -> "t,8
  [14, 17, 18]
 Possible Types { }"
	"t,8
  [14, 17, 18]
 Possible Types { }" -> "=
  [14, 12, 18]"
	"pt,2
  [14, 12, 14]
 Possible Types { }" -> "merge pt2, pt1"
	"=
  [14, 12, 18]" -> "pt,2
  [14, 12, 14]
 Possible Types { }"
	"merge placeholders0, placeholders2" -> "merge (placeholders0, placeholders2), placeholders0"
	"merge pt2, pt1" -> "pt,3
  [15, 21, 23]
 Possible Types { }"
	"shape,1
  [15, 8, 13]
 Possible Types { }" -> "call append
  [15, 8, 24]"
	"pt,3
  [15, 21, 23]
 Possible Types { }" -> "call append
  [15, 8, 24]"
	"shape,2
  [15, 8, 13]
 Possible Types { }" -> "merge shape2, shape0"
	"call append
  [15, 8, 24]" -> "shape,2
  [15, 8, 13]
 Possible Types { }"
	"merge shape2, shape0" -> "shape,3
  [16, 11, 16]
 Possible Types { }"
	"merge (placeholders0, placeholders2), placeholders0" -> "placeholders,3
  [16, 18, 30]
 Possible Types { }"
	"forin
  [9, 4, 24]" -> "Tuple_Write
  [9, 8, 13]"
	"shape,3
  [16, 11, 16]
 Possible Types { }" -> "Tuple_Read
  [16, 11, 30]"
	"placeholders,3
  [16, 18, 30]
 Possible Types { }" -> "Tuple_Read
  [16, 11, 30]"
	"Tuple_Read
  [16, 11, 30]" -> "Return_Value@parse
  [16, 4, 30]
 Possible Types { }"
}
